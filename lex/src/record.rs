// @generated - This file is generated by esquema-codegen (forked from atrium-codegen). DO NOT EDIT.
//!A collection of known record types.
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(tag = "$type")]
pub enum KnownRecord {
    #[serde(rename = "app.bsky.actor.profile")]
    AppBskyActorProfile(Box<crate::app::bsky::actor::profile::Record>),
    #[serde(rename = "app.bsky.actor.status")]
    AppBskyActorStatus(Box<crate::app::bsky::actor::status::Record>),
    #[serde(rename = "app.bsky.feed.generator")]
    AppBskyFeedGenerator(Box<crate::app::bsky::feed::generator::Record>),
    #[serde(rename = "app.bsky.feed.like")]
    AppBskyFeedLike(Box<crate::app::bsky::feed::like::Record>),
    #[serde(rename = "app.bsky.feed.post")]
    AppBskyFeedPost(Box<crate::app::bsky::feed::post::Record>),
    #[serde(rename = "app.bsky.feed.postgate")]
    AppBskyFeedPostgate(Box<crate::app::bsky::feed::postgate::Record>),
    #[serde(rename = "app.bsky.feed.repost")]
    AppBskyFeedRepost(Box<crate::app::bsky::feed::repost::Record>),
    #[serde(rename = "app.bsky.feed.threadgate")]
    AppBskyFeedThreadgate(Box<crate::app::bsky::feed::threadgate::Record>),
    #[serde(rename = "app.bsky.graph.block")]
    AppBskyGraphBlock(Box<crate::app::bsky::graph::block::Record>),
    #[serde(rename = "app.bsky.graph.follow")]
    AppBskyGraphFollow(Box<crate::app::bsky::graph::follow::Record>),
    #[serde(rename = "app.bsky.graph.list")]
    AppBskyGraphList(Box<crate::app::bsky::graph::list::Record>),
    #[serde(rename = "app.bsky.graph.listblock")]
    AppBskyGraphListblock(Box<crate::app::bsky::graph::listblock::Record>),
    #[serde(rename = "app.bsky.graph.listitem")]
    AppBskyGraphListitem(Box<crate::app::bsky::graph::listitem::Record>),
    #[serde(rename = "app.bsky.graph.starterpack")]
    AppBskyGraphStarterpack(Box<crate::app::bsky::graph::starterpack::Record>),
    #[serde(rename = "app.bsky.graph.verification")]
    AppBskyGraphVerification(Box<crate::app::bsky::graph::verification::Record>),
    #[serde(rename = "app.bsky.labeler.service")]
    AppBskyLabelerService(Box<crate::app::bsky::labeler::service::Record>),
    #[serde(rename = "chat.bsky.actor.declaration")]
    ChatBskyActorDeclaration(Box<crate::chat::bsky::actor::declaration::Record>),
    #[serde(rename = "com.atproto.lexicon.schema")]
    ComAtprotoLexiconSchema(Box<crate::com::atproto::lexicon::schema::Record>),
    #[serde(rename = "place.stream.chat.gate")]
    PlaceStreamChatGate(Box<crate::place::stream::chat::gate::Record>),
    #[serde(rename = "place.stream.chat.message")]
    PlaceStreamChatMessage(Box<crate::place::stream::chat::message::Record>),
    #[serde(rename = "place.stream.chat.profile")]
    PlaceStreamChatProfile(Box<crate::place::stream::chat::profile::Record>),
    #[serde(rename = "place.stream.key")]
    PlaceStreamKey(Box<crate::place::stream::key::Record>),
    #[serde(rename = "place.stream.livestream")]
    PlaceStreamLivestream(Box<crate::place::stream::livestream::Record>),
    #[serde(rename = "place.stream.segment")]
    PlaceStreamSegment(Box<crate::place::stream::segment::Record>),
    #[serde(rename = "place.stream.server.settings")]
    PlaceStreamServerSettings(Box<crate::place::stream::server::settings::Record>),
}
impl From<crate::app::bsky::actor::profile::Record> for KnownRecord {
    fn from(record: crate::app::bsky::actor::profile::Record) -> Self {
        KnownRecord::AppBskyActorProfile(Box::new(record))
    }
}
impl From<crate::app::bsky::actor::profile::RecordData> for KnownRecord {
    fn from(record_data: crate::app::bsky::actor::profile::RecordData) -> Self {
        KnownRecord::AppBskyActorProfile(Box::new(record_data.into()))
    }
}
impl From<crate::app::bsky::actor::status::Record> for KnownRecord {
    fn from(record: crate::app::bsky::actor::status::Record) -> Self {
        KnownRecord::AppBskyActorStatus(Box::new(record))
    }
}
impl From<crate::app::bsky::actor::status::RecordData> for KnownRecord {
    fn from(record_data: crate::app::bsky::actor::status::RecordData) -> Self {
        KnownRecord::AppBskyActorStatus(Box::new(record_data.into()))
    }
}
impl From<crate::app::bsky::feed::generator::Record> for KnownRecord {
    fn from(record: crate::app::bsky::feed::generator::Record) -> Self {
        KnownRecord::AppBskyFeedGenerator(Box::new(record))
    }
}
impl From<crate::app::bsky::feed::generator::RecordData> for KnownRecord {
    fn from(record_data: crate::app::bsky::feed::generator::RecordData) -> Self {
        KnownRecord::AppBskyFeedGenerator(Box::new(record_data.into()))
    }
}
impl From<crate::app::bsky::feed::like::Record> for KnownRecord {
    fn from(record: crate::app::bsky::feed::like::Record) -> Self {
        KnownRecord::AppBskyFeedLike(Box::new(record))
    }
}
impl From<crate::app::bsky::feed::like::RecordData> for KnownRecord {
    fn from(record_data: crate::app::bsky::feed::like::RecordData) -> Self {
        KnownRecord::AppBskyFeedLike(Box::new(record_data.into()))
    }
}
impl From<crate::app::bsky::feed::post::Record> for KnownRecord {
    fn from(record: crate::app::bsky::feed::post::Record) -> Self {
        KnownRecord::AppBskyFeedPost(Box::new(record))
    }
}
impl From<crate::app::bsky::feed::post::RecordData> for KnownRecord {
    fn from(record_data: crate::app::bsky::feed::post::RecordData) -> Self {
        KnownRecord::AppBskyFeedPost(Box::new(record_data.into()))
    }
}
impl From<crate::app::bsky::feed::postgate::Record> for KnownRecord {
    fn from(record: crate::app::bsky::feed::postgate::Record) -> Self {
        KnownRecord::AppBskyFeedPostgate(Box::new(record))
    }
}
impl From<crate::app::bsky::feed::postgate::RecordData> for KnownRecord {
    fn from(record_data: crate::app::bsky::feed::postgate::RecordData) -> Self {
        KnownRecord::AppBskyFeedPostgate(Box::new(record_data.into()))
    }
}
impl From<crate::app::bsky::feed::repost::Record> for KnownRecord {
    fn from(record: crate::app::bsky::feed::repost::Record) -> Self {
        KnownRecord::AppBskyFeedRepost(Box::new(record))
    }
}
impl From<crate::app::bsky::feed::repost::RecordData> for KnownRecord {
    fn from(record_data: crate::app::bsky::feed::repost::RecordData) -> Self {
        KnownRecord::AppBskyFeedRepost(Box::new(record_data.into()))
    }
}
impl From<crate::app::bsky::feed::threadgate::Record> for KnownRecord {
    fn from(record: crate::app::bsky::feed::threadgate::Record) -> Self {
        KnownRecord::AppBskyFeedThreadgate(Box::new(record))
    }
}
impl From<crate::app::bsky::feed::threadgate::RecordData> for KnownRecord {
    fn from(record_data: crate::app::bsky::feed::threadgate::RecordData) -> Self {
        KnownRecord::AppBskyFeedThreadgate(Box::new(record_data.into()))
    }
}
impl From<crate::app::bsky::graph::block::Record> for KnownRecord {
    fn from(record: crate::app::bsky::graph::block::Record) -> Self {
        KnownRecord::AppBskyGraphBlock(Box::new(record))
    }
}
impl From<crate::app::bsky::graph::block::RecordData> for KnownRecord {
    fn from(record_data: crate::app::bsky::graph::block::RecordData) -> Self {
        KnownRecord::AppBskyGraphBlock(Box::new(record_data.into()))
    }
}
impl From<crate::app::bsky::graph::follow::Record> for KnownRecord {
    fn from(record: crate::app::bsky::graph::follow::Record) -> Self {
        KnownRecord::AppBskyGraphFollow(Box::new(record))
    }
}
impl From<crate::app::bsky::graph::follow::RecordData> for KnownRecord {
    fn from(record_data: crate::app::bsky::graph::follow::RecordData) -> Self {
        KnownRecord::AppBskyGraphFollow(Box::new(record_data.into()))
    }
}
impl From<crate::app::bsky::graph::list::Record> for KnownRecord {
    fn from(record: crate::app::bsky::graph::list::Record) -> Self {
        KnownRecord::AppBskyGraphList(Box::new(record))
    }
}
impl From<crate::app::bsky::graph::list::RecordData> for KnownRecord {
    fn from(record_data: crate::app::bsky::graph::list::RecordData) -> Self {
        KnownRecord::AppBskyGraphList(Box::new(record_data.into()))
    }
}
impl From<crate::app::bsky::graph::listblock::Record> for KnownRecord {
    fn from(record: crate::app::bsky::graph::listblock::Record) -> Self {
        KnownRecord::AppBskyGraphListblock(Box::new(record))
    }
}
impl From<crate::app::bsky::graph::listblock::RecordData> for KnownRecord {
    fn from(record_data: crate::app::bsky::graph::listblock::RecordData) -> Self {
        KnownRecord::AppBskyGraphListblock(Box::new(record_data.into()))
    }
}
impl From<crate::app::bsky::graph::listitem::Record> for KnownRecord {
    fn from(record: crate::app::bsky::graph::listitem::Record) -> Self {
        KnownRecord::AppBskyGraphListitem(Box::new(record))
    }
}
impl From<crate::app::bsky::graph::listitem::RecordData> for KnownRecord {
    fn from(record_data: crate::app::bsky::graph::listitem::RecordData) -> Self {
        KnownRecord::AppBskyGraphListitem(Box::new(record_data.into()))
    }
}
impl From<crate::app::bsky::graph::starterpack::Record> for KnownRecord {
    fn from(record: crate::app::bsky::graph::starterpack::Record) -> Self {
        KnownRecord::AppBskyGraphStarterpack(Box::new(record))
    }
}
impl From<crate::app::bsky::graph::starterpack::RecordData> for KnownRecord {
    fn from(record_data: crate::app::bsky::graph::starterpack::RecordData) -> Self {
        KnownRecord::AppBskyGraphStarterpack(Box::new(record_data.into()))
    }
}
impl From<crate::app::bsky::graph::verification::Record> for KnownRecord {
    fn from(record: crate::app::bsky::graph::verification::Record) -> Self {
        KnownRecord::AppBskyGraphVerification(Box::new(record))
    }
}
impl From<crate::app::bsky::graph::verification::RecordData> for KnownRecord {
    fn from(record_data: crate::app::bsky::graph::verification::RecordData) -> Self {
        KnownRecord::AppBskyGraphVerification(Box::new(record_data.into()))
    }
}
impl From<crate::app::bsky::labeler::service::Record> for KnownRecord {
    fn from(record: crate::app::bsky::labeler::service::Record) -> Self {
        KnownRecord::AppBskyLabelerService(Box::new(record))
    }
}
impl From<crate::app::bsky::labeler::service::RecordData> for KnownRecord {
    fn from(record_data: crate::app::bsky::labeler::service::RecordData) -> Self {
        KnownRecord::AppBskyLabelerService(Box::new(record_data.into()))
    }
}
impl From<crate::chat::bsky::actor::declaration::Record> for KnownRecord {
    fn from(record: crate::chat::bsky::actor::declaration::Record) -> Self {
        KnownRecord::ChatBskyActorDeclaration(Box::new(record))
    }
}
impl From<crate::chat::bsky::actor::declaration::RecordData> for KnownRecord {
    fn from(record_data: crate::chat::bsky::actor::declaration::RecordData) -> Self {
        KnownRecord::ChatBskyActorDeclaration(Box::new(record_data.into()))
    }
}
impl From<crate::com::atproto::lexicon::schema::Record> for KnownRecord {
    fn from(record: crate::com::atproto::lexicon::schema::Record) -> Self {
        KnownRecord::ComAtprotoLexiconSchema(Box::new(record))
    }
}
impl From<crate::com::atproto::lexicon::schema::RecordData> for KnownRecord {
    fn from(record_data: crate::com::atproto::lexicon::schema::RecordData) -> Self {
        KnownRecord::ComAtprotoLexiconSchema(Box::new(record_data.into()))
    }
}
impl From<crate::place::stream::chat::gate::Record> for KnownRecord {
    fn from(record: crate::place::stream::chat::gate::Record) -> Self {
        KnownRecord::PlaceStreamChatGate(Box::new(record))
    }
}
impl From<crate::place::stream::chat::gate::RecordData> for KnownRecord {
    fn from(record_data: crate::place::stream::chat::gate::RecordData) -> Self {
        KnownRecord::PlaceStreamChatGate(Box::new(record_data.into()))
    }
}
impl From<crate::place::stream::chat::message::Record> for KnownRecord {
    fn from(record: crate::place::stream::chat::message::Record) -> Self {
        KnownRecord::PlaceStreamChatMessage(Box::new(record))
    }
}
impl From<crate::place::stream::chat::message::RecordData> for KnownRecord {
    fn from(record_data: crate::place::stream::chat::message::RecordData) -> Self {
        KnownRecord::PlaceStreamChatMessage(Box::new(record_data.into()))
    }
}
impl From<crate::place::stream::chat::profile::Record> for KnownRecord {
    fn from(record: crate::place::stream::chat::profile::Record) -> Self {
        KnownRecord::PlaceStreamChatProfile(Box::new(record))
    }
}
impl From<crate::place::stream::chat::profile::RecordData> for KnownRecord {
    fn from(record_data: crate::place::stream::chat::profile::RecordData) -> Self {
        KnownRecord::PlaceStreamChatProfile(Box::new(record_data.into()))
    }
}
impl From<crate::place::stream::key::Record> for KnownRecord {
    fn from(record: crate::place::stream::key::Record) -> Self {
        KnownRecord::PlaceStreamKey(Box::new(record))
    }
}
impl From<crate::place::stream::key::RecordData> for KnownRecord {
    fn from(record_data: crate::place::stream::key::RecordData) -> Self {
        KnownRecord::PlaceStreamKey(Box::new(record_data.into()))
    }
}
impl From<crate::place::stream::livestream::Record> for KnownRecord {
    fn from(record: crate::place::stream::livestream::Record) -> Self {
        KnownRecord::PlaceStreamLivestream(Box::new(record))
    }
}
impl From<crate::place::stream::livestream::RecordData> for KnownRecord {
    fn from(record_data: crate::place::stream::livestream::RecordData) -> Self {
        KnownRecord::PlaceStreamLivestream(Box::new(record_data.into()))
    }
}
impl From<crate::place::stream::segment::Record> for KnownRecord {
    fn from(record: crate::place::stream::segment::Record) -> Self {
        KnownRecord::PlaceStreamSegment(Box::new(record))
    }
}
impl From<crate::place::stream::segment::RecordData> for KnownRecord {
    fn from(record_data: crate::place::stream::segment::RecordData) -> Self {
        KnownRecord::PlaceStreamSegment(Box::new(record_data.into()))
    }
}
impl From<crate::place::stream::server::settings::Record> for KnownRecord {
    fn from(record: crate::place::stream::server::settings::Record) -> Self {
        KnownRecord::PlaceStreamServerSettings(Box::new(record))
    }
}
impl From<crate::place::stream::server::settings::RecordData> for KnownRecord {
    fn from(record_data: crate::place::stream::server::settings::RecordData) -> Self {
        KnownRecord::PlaceStreamServerSettings(Box::new(record_data.into()))
    }
}
impl Into<atrium_api::types::Unknown> for KnownRecord {
    fn into(self) -> atrium_api::types::Unknown {
        atrium_api::types::TryIntoUnknown::try_into_unknown(&self).unwrap()
    }
}
