// @generated - This file is generated by esquema-codegen (forked from atrium-codegen). DO NOT EDIT.
//!Definitions for the `place.stream.server.updateWebhook` namespace.
pub const NSID: &str = "place.stream.server.updateWebhook";
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct InputData {
    ///Whether this webhook should be active.
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub active: core::option::Option<bool>,
    ///A description of what this webhook is used for.
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub description: core::option::Option<String>,
    ///The types of events this webhook should receive.
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub events: core::option::Option<Vec<String>>,
    ///The ID of the webhook to update.
    pub id: String,
    ///A user-friendly name for this webhook.
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub name: core::option::Option<String>,
    ///Text to prepend to webhook messages.
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub prefix: core::option::Option<String>,
    ///Text replacement rules for webhook messages.
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub rewrite: core::option::Option<
        Vec<crate::place::stream::server::defs::RewriteRule>,
    >,
    ///Text to append to webhook messages.
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub suffix: core::option::Option<String>,
    ///The webhook URL where events will be sent.
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub url: core::option::Option<String>,
}
pub type Input = atrium_api::types::Object<InputData>;
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct OutputData {
    pub webhook: crate::place::stream::server::defs::Webhook,
}
pub type Output = atrium_api::types::Object<OutputData>;
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(tag = "error", content = "message")]
pub enum Error {
    ///The specified webhook was not found.
    WebhookNotFound(Option<String>),
    ///The authenticated user does not have access to this webhook.
    Unauthorized(Option<String>),
    ///The provided webhook URL is invalid or unreachable.
    InvalidUrl(Option<String>),
    ///A webhook with this URL already exists for this user.
    DuplicateWebhook(Option<String>),
}
impl std::fmt::Display for Error {
    fn fmt(&self, _f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Error::WebhookNotFound(msg) => {
                write!(_f, "WebhookNotFound")?;
                if let Some(msg) = msg {
                    write!(_f, ": {msg}")?;
                }
            }
            Error::Unauthorized(msg) => {
                write!(_f, "Unauthorized")?;
                if let Some(msg) = msg {
                    write!(_f, ": {msg}")?;
                }
            }
            Error::InvalidUrl(msg) => {
                write!(_f, "InvalidUrl")?;
                if let Some(msg) = msg {
                    write!(_f, ": {msg}")?;
                }
            }
            Error::DuplicateWebhook(msg) => {
                write!(_f, "DuplicateWebhook")?;
                if let Some(msg) = msg {
                    write!(_f, ": {msg}")?;
                }
            }
        }
        Ok(())
    }
}
