// @generated - This file is generated by esquema-codegen (forked from atrium-codegen). DO NOT EDIT.
//!Definitions for the `place.stream.server.defs` namespace.
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct RewriteRuleData {
    ///Text to search for and replace.
    pub from: String,
    ///Text to replace with.
    pub to: String,
}
pub type RewriteRule = atrium_api::types::Object<RewriteRuleData>;
///A webhook configuration for receiving Streamplace events.
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct WebhookData {
    ///Whether this webhook is currently active.
    pub active: bool,
    ///When this webhook was created.
    pub created_at: atrium_api::types::string::Datetime,
    ///A description of what this webhook is used for.
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub description: core::option::Option<String>,
    ///Number of consecutive errors for this webhook.
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub error_count: core::option::Option<i64>,
    ///The types of events this webhook should receive.
    pub events: Vec<String>,
    ///Unique identifier for this webhook.
    pub id: String,
    ///When this webhook was last triggered.
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub last_triggered: core::option::Option<atrium_api::types::string::Datetime>,
    ///A user-friendly name for this webhook.
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub name: core::option::Option<String>,
    ///Text to prepend to webhook messages.
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub prefix: core::option::Option<String>,
    ///Text replacement rules for webhook messages.
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub rewrite: core::option::Option<Vec<RewriteRule>>,
    ///Text to append to webhook messages.
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub suffix: core::option::Option<String>,
    ///When this webhook was last updated.
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub updated_at: core::option::Option<atrium_api::types::string::Datetime>,
    ///The webhook URL where events will be sent.
    pub url: String,
}
pub type Webhook = atrium_api::types::Object<WebhookData>;
