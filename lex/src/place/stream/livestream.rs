// @generated - This file is generated by esquema-codegen (forked from atrium-codegen). DO NOT EDIT.
//!Definitions for the `place.stream.livestream` namespace.
use atrium_api::types::TryFromUnknown;
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct RecordData {
    ///The source of the livestream, if available, in a User Agent format: `<product> / <product-version> <comment>` e.g. Streamplace/0.7.5 iOS
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub agent: core::option::Option<String>,
    ///The primary URL where this livestream can be viewed, if available.
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub canonical_url: core::option::Option<String>,
    ///Client-declared timestamp when this livestream started.
    pub created_at: atrium_api::types::string::Datetime,
    ///The post that announced this livestream.
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub post: core::option::Option<crate::com::atproto::repo::strong_ref::Main>,
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub thumb: core::option::Option<atrium_api::types::BlobRef>,
    ///The title of the livestream, as it will be announced to followers.
    pub title: String,
    ///The URL where this stream can be found. This is primarily a hint for other Streamplace nodes to locate and replicate the stream.
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub url: core::option::Option<String>,
}
pub type Record = atrium_api::types::Object<RecordData>;
impl From<atrium_api::types::Unknown> for RecordData {
    fn from(value: atrium_api::types::Unknown) -> Self {
        Self::try_from_unknown(value).unwrap()
    }
}
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct LivestreamViewData {
    pub author: crate::app::bsky::actor::defs::ProfileViewBasic,
    pub cid: atrium_api::types::string::Cid,
    pub indexed_at: atrium_api::types::string::Datetime,
    pub record: atrium_api::types::Unknown,
    pub uri: String,
    ///The number of viewers watching this livestream. Use when you can't reasonably use #viewerCount directly.
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub viewer_count: core::option::Option<
        crate::place::stream::livestream::ViewerCount,
    >,
}
pub type LivestreamView = atrium_api::types::Object<LivestreamViewData>;
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct StreamplaceAnythingData {
    pub livestream: atrium_api::types::Union<StreamplaceAnythingLivestreamRefs>,
}
pub type StreamplaceAnything = atrium_api::types::Object<StreamplaceAnythingData>;
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct ViewerCountData {
    pub count: i64,
}
pub type ViewerCount = atrium_api::types::Object<ViewerCountData>;
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(tag = "$type")]
pub enum StreamplaceAnythingLivestreamRefs {
    #[serde(rename = "place.stream.livestream#livestreamView")]
    LivestreamView(Box<LivestreamView>),
    #[serde(rename = "place.stream.livestream#viewerCount")]
    ViewerCount(Box<ViewerCount>),
    #[serde(rename = "place.stream.defs#blockView")]
    PlaceStreamDefsBlockView(Box<crate::place::stream::defs::BlockView>),
    #[serde(rename = "place.stream.defs#renditions")]
    PlaceStreamDefsRenditions(Box<crate::place::stream::defs::Renditions>),
    #[serde(rename = "place.stream.defs#rendition")]
    PlaceStreamDefsRendition(Box<crate::place::stream::defs::Rendition>),
    #[serde(rename = "place.stream.chat.defs#messageView")]
    PlaceStreamChatDefsMessageView(Box<crate::place::stream::chat::defs::MessageView>),
}
