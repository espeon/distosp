// @generated - This file is generated by esquema-codegen (forked from atrium-codegen). DO NOT EDIT.
//!Definitions for the `place.stream.chat.message` namespace.
use atrium_api::types::TryFromUnknown;
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct RecordData {
    ///Client-declared timestamp when this message was originally created.
    pub created_at: atrium_api::types::string::Datetime,
    ///Annotations of text (mentions, URLs, etc)
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub facets: core::option::Option<Vec<crate::place::stream::richtext::facet::Main>>,
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub reply: core::option::Option<ReplyRef>,
    ///The DID of the streamer whose chat this is.
    pub streamer: atrium_api::types::string::Did,
    ///The primary message content. May be an empty string, if there are embeds.
    pub text: String,
}
pub type Record = atrium_api::types::Object<RecordData>;
impl From<atrium_api::types::Unknown> for RecordData {
    fn from(value: atrium_api::types::Unknown) -> Self {
        Self::try_from_unknown(value).unwrap()
    }
}
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct ReplyRefData {
    pub parent: crate::com::atproto::repo::strong_ref::Main,
    pub root: crate::com::atproto::repo::strong_ref::Main,
}
pub type ReplyRef = atrium_api::types::Object<ReplyRefData>;
