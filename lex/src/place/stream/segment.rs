// @generated - This file is generated by esquema-codegen (forked from atrium-codegen). DO NOT EDIT.
//!Definitions for the `place.stream.segment` namespace.
use atrium_api::types::TryFromUnknown;
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct RecordData {
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub audio: core::option::Option<Vec<Audio>>,
    pub creator: atrium_api::types::string::Did,
    ///The duration of the segment in nanoseconds
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub duration: core::option::Option<i64>,
    ///Unique identifier for the segment
    pub id: String,
    ///The DID of the signing key used for this segment
    pub signing_key: String,
    ///The size of the segment in bytes
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub size: core::option::Option<i64>,
    ///When this segment started
    pub start_time: atrium_api::types::string::Datetime,
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub video: core::option::Option<Vec<Video>>,
}
pub type Record = atrium_api::types::Object<RecordData>;
impl From<atrium_api::types::Unknown> for RecordData {
    fn from(value: atrium_api::types::Unknown) -> Self {
        Self::try_from_unknown(value).unwrap()
    }
}
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct AudioData {
    pub channels: i64,
    pub codec: String,
    pub rate: i64,
}
pub type Audio = atrium_api::types::Object<AudioData>;
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct FramerateData {
    pub den: i64,
    pub num: i64,
}
pub type Framerate = atrium_api::types::Object<FramerateData>;
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct SegmentViewData {
    pub cid: atrium_api::types::string::Cid,
    pub record: atrium_api::types::Unknown,
}
pub type SegmentView = atrium_api::types::Object<SegmentViewData>;
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct VideoData {
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub bframes: core::option::Option<bool>,
    pub codec: String,
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub framerate: core::option::Option<Framerate>,
    pub height: i64,
    pub width: i64,
}
pub type Video = atrium_api::types::Object<VideoData>;
